# This file is part of libertine linux's package busybox. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/busybox/master/COPYRIGHT. No part of libertine linux's package busybox, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package busybox. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/busybox/master/COPYRIGHT.


variant=upstream

depends build_gnumake
build_needs make

# Problem is BusyBox supplied patch, which is what Alpine Linux uses, can't cleanly apply the patches we apply to busybox...
depends build_netbsd_src_patch
build_needs patch

build_needs xargs
build_needs cmp tail od cut mktemp sort uniq echo touch dirname basename uname
build_needs install sed

# Not sure why, but is needed...
build_needs sleep

case "$package" in
	
	build_busybox)
		build_needs cc
		build_needs ar
		
		build_provides echo
		build_provides pwd
		build_provides printf
		build_provides '['
		build_provides '[['
		build_provides test
		build_provides true
		build_provides false
		build_provides kill
		build_provides yes
		build_provides dirname
		build_provides basename
		build_provides mkdir
		build_provides rmdir
		build_provides rm
		build_provides touch
		build_provides chmod
		build_provides chown
		build_provides chgrp
		build_provides mkfifo
		build_provides mknod
		build_provides install
		build_provides mktemp
		build_provides which
		build_provides unlink
		build_provides stat
		build_provides readlink
		build_provides ls
		build_provides realpath
		build_provides mv
		build_provides cp
		build_provides ln
		build_provides find
		build_provides xargs
		build_provides cksum
		build_provides md5sum
		build_provides sha1sum
		build_provides sha256sum
		build_provides sha512sum
		build_provides sha3sum
		build_provides env
		build_provides tr
		build_provides dos2unix
		build_provides unix2dos
		build_provides tee
		build_provides flock
		build_provides dd
		build_provides clear
		build_provides reset
		build_provides getopt
		build_provides id
		build_provides cmp
		build_provides sort
		build_provides head
		build_provides diff
		build_provides ed
		build_provides vi
		build_provides uniq
		build_provides tail
		build_provides cat
		build_provides od
		build_provides tac
		build_provides wc
		build_provides base64
		build_provides mt
		build_provides tar
		build_provides cpio
		build_provides gzip
		build_provides gunzip
		build_provides bzip2
		build_provides bunzip2
		build_provides bzcat
		build_provides unxz
		build_provides xzcat
		build_provides lzma
		build_provides unlzma
		build_provides lzcat
		build_provides lzop
		build_provides unlzop
		build_provides lzopcat
		build_provides unzip
		build_provides rpm2cpio
		build_provides uncompress
		build_provides ed
		build_provides iconv
		
		# musl-extras
		build_provides getconf
		build_provides getent
		
		# Note: xz is provided by build_xz_utils_xz (linux needs more features)
		# Note: patch is probided by build_netbsd_src_patch (downstream users like musl_cross_make and even ourselves need more features)
		
		# Segmentation Fault issues
		
		# Something in here also segfaults
		build_provides date
		#build_provides sleep
		build_provides uname
		build_provides printenv
		
		# Possibly ok
		build_provides expr
		build_provides seq
		#build_provides sum
		#build_provides df
		#build_provides du
		#build_provides expand
		#build_provides unexpand
		#build_provides fold
		#build_provides nice
		#build_provides nohup
		#build_provides dc
		#build_provides time
		#build_provides zcat
		
		# Something in this list
		build_provides grep
		build_provides awk
		build_provides sed
		build_provides egrep
		build_provides fgrep
		build_provides pgrep
		build_provides cut
		#build_provides comm
		#build_provides split
		
		# Very broken
		#build_provides sh
	;;
	
	busybox)

		depends build_busybox
	
		depends build_ccache
		build_needs ccache
		
		depends build_musl_cross_make_build
		build_needs "$libertine_build"-cc

		depends build_musl_cross_make_host
		#  "$libertine_host"-ranlib "$libertine_host"-as
		build_needs "$libertine_host"-cc "$libertine_host"-ar "$libertine_host"-strip
		
		depends build_paxctl
		build_needs paxctl
	;;
	
esac

libertine_compile_build_busybox()
{
	_libertine_compile_busybox_internal "$(libertine_public_outputBuildSysrootPath)" "$libertine_build" false "-Werror=implicit-function-declaration -fno-strict-aliasing"
}

libertine_compile_busybox()
{
	_libertine_compile_busybox_internal "$(libertine_public_outputInitramfsPath)" "$libertine_host" true "$(libertine_public_hostCCompilerFlags '-static' '--static' '-Wl,-Bstatic' '-static-libgcc' '-D_GNU_SOURCE' '-ffunction-sections' '-fdata-sections' '-Wl,--gc-sections') -fno-strict-aliasing"
}

build_needs sed cp mkdir
_libertine_compile_busybox_internal()
{
	local outputSysroot="$1"
	local target="$2"
	local shouldStrip="$3"
	local cFlags="$4"
	
	# Fix hardcoded references to gcc and introduce ccache
	
		if $shouldStrip; then
			local hostCc="ccache $libertine_build-cc"
			local crossCompileCc='ccache $(CROSS_COMPILE)cc'
			local targetCc="ccache ${target}-cc"
			local SKIP_STRIP=n
		else
			local hostCc='cc'
			local crossCompileCc='cc'
			local targetCc='cc'
			local SKIP_STRIP=y
		fi
	
		# HOSTCC is hardcoded to gcc
		sed -i -e 's/= gcc/= '"$hostCc"'/g' "$(libertine_public_sourcePath)"/Makefile
		
		# CC is hardcoded to $(CROSS_COMPILE)gcc
		sed -i -e 's/$(CROSS_COMPILE)gcc/'"$crossCompileCc"'/g' "$(libertine_public_sourcePath)"/Makefile "$(libertine_public_sourcePath)"/scripts/Makefile.IMA
		
		# Harcoded to what would be the build system's gcc, which seems wrong, as well, when surely it should be doing link tests for host system...
		sed -i -e 's/gcc/'"$targetCc"'/g' "$(libertine_public_sourcePath)"/scripts/trylink
	
	# Install any extra programs
	libertine_public_copy "$(libertine_public_packagePath)"/extras/. "$(libertine_public_sourcePath)"/
	
	# Patch in additional musl applets
	local applet
	local upperCaseConfigName
	for applet in getconf getent iconv
	do
		local outputCFilePath="$(libertine_public_sourcePath)"/debianutils/"$applet".c
		cp "$(libertine_public_packagePath)"/musl-extras/"$applet".busybox "$outputCFilePath"
		
		case "$applet" in
			
			iconv)
				upperCaseConfigName=ICONV
				sed -e 's/^int main(/#include "libbb.h"\nint '"$applet"'_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;\nint '"$applet"'_main(/g' "$(libertine_public_packagePath)"/musl-extras/"$applet".c >>"$outputCFilePath"
			;;
				
			getconf)
				upperCaseConfigName=GETCONF
				sed -e 's/^int main(/#include "libbb.h"\nint '"$applet"'_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;\nint '"$applet"'_main(/g' "$(libertine_public_packagePath)"/musl-extras/"$applet".c >>"$outputCFilePath"
			;;
			
			getent)
				upperCaseConfigName=GETENT
				# (previous line is 'int')
				# Brittle
				sed -e '/^int$/d' -e 's/^main(/#include "libbb.h"\nint '"$applet"'_main(int argc, char *argv[]) MAIN_EXTERNALLY_VISIBLE;\nint '"$applet"'_main(/g' "$(libertine_public_packagePath)"/musl-extras/"$applet".c >>"$outputCFilePath"
			;;
			
			*)
				core_exitError $core_commandLine_exitCode_SOFTWARE "No idea how to convert applet '$applet'"
			;;
			
		esac
				
		local upperCaseConfigName="$(printf 'CONFIG_%s' "$applet" | tr a-z A-Z)"
		libertine_public_menuconfig_adjust "$upperCaseConfigName" y false
	done
	
	local outputFolderPath="$outputSysroot"/usr
	mkdir -m 0755 -p "$outputFolderPath"
	
	if $shouldStrip; then
		libertine_public_menuconfig_adjust CONFIG_CROSS_COMPILER_PREFIX "$target"- true
		libertine_public_menuconfig_adjust CONFIG_SYSROOT "$(libertine_public_inputSysrootPath)" true
	else
		libertine_public_menuconfig_adjust CONFIG_CROSS_COMPILER_PREFIX '' true
		libertine_public_menuconfig_adjust CONFIG_SYSROOT '' true
	fi
	libertine_public_menuconfig_adjust CONFIG_PREFIX "$outputFolderPath" true
	libertine_public_menuconfig_adjust CONFIG_EXTRA_CFLAGS "$cFlags" true
	
	# Alpine Linux specific features we don't use
	#libertine_public_menuconfig_adjust CONFIG_FEATURE_SU_NULLOK_SECURE y false
	#libertine_public_menuconfig_adjust CONFIG_FEATURE_MODUTILS_BIN y false
	
	if [ "$target" = "$libertine_build" ]; then
		libertine_public_menuconfig_adjust CONFIG_BUSYBOX_EXEC_PATH "$outputFolderPath"/bin/busybox true
	fi
	
	pushd "$(libertine_public_sourcePath)"	
		
		libertine_public_make V=1 SKIP_STRIP="$SKIP_STRIP"
		
		libertine_public_make V=1 SKIP_STRIP="$SKIP_STRIP" install
		
	popd
	
	if $shouldStrip; then
		libertine_public_secureBinary "$outputSysroot"/usr/bin/busybox
	fi
}
